"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-nma=xi6x2p-crjg^ifqqkapyu1qjd0l=+wn)-rijk_o%$!k3w_")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"


# Use the same host for the frontend for simplicity (we choose localhost here)
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://s3-deployment-ec2.s3-website-ap-southeast-1.amazonaws.com",
    "https://curtinunihubplus.com",  # Add HTTPS version
    "https://www.curtinunihubplus.com",  # Add HTTPS version
    "http://curtinunihubplus.com",
    "http://www.curtinunihubplus.com"
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Frontend origin
    "http://s3-deployment-ec2.s3-website-ap-southeast-1.amazonaws.com",  # Frontend S3 bucket URL
    "http://curtinunihubplus.com",
    "https://curtinunihubplus.com",
    "https://www.curtinunihubplus.com",
    'http://www.curtinunihubplus.com'
]

ALLOWED_HOSTS = [
    "localhost",  # Frontend local
    "127.0.0.1",  # Backend (change to 54.169.81.75:8000)
    "54.169.81.75",
    "curtinunihubplus.com",
    "www.curtinunihubplus.com",
]


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Add these throttling settings
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "60/minute",
        "user": "200/minute",
        "auth": "30/minute", 
    }
}


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "collaboration",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework_simplejwt",
    "api",
    "rest_framework",
    "corsheaders",
    "feedback",
    "user_profile",
    "clubs",
    "event.add_event",
    "event.event_registration",
    "event.event_page",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
]

"""STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles" """

# Middleware order: corsheaders.middleware.CorsMiddleware should be at the very top
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Must be placed first
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'api.middleware.InputValidationMiddleware',
]


ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR.parent / "my-app" / "build"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "unihub",
        "USER": "admin",
        "PASSWORD": "Unihub+Capstone",  # Add password to .env file
        "HOST": "unihub3.clggkwmcaggd.ap-southeast-1.rds.amazonaws.com",
        "PORT": "3306",
        "OPTIONS": {
            # Set SQL mode to be compatible with your MariaDB dump
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES,NO_AUTO_VALUE_ON_ZERO'",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# # Media files settings
# MEDIA_URL = '/assets/'  # URL path for accessing media files
# MEDIA_ROOT = BASE_DIR.parent / 'frontend' / 'src' / 'assets'  # Absolute path to the assets folder

# S3 Configuration (keep storages in INSTALLED_APPS)
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = 'ap-southeast-1'  # Singapore region
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

# Serve media files from S3
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# Define distinct folder paths for different upload types
AWS_CLUB_LOGO_LOCATION = 'club_logos'
AWS_CLUB_BANNER_LOCATION = 'club_banners'
AWS_EVENT_BANNER_LOCATION = 'event_banners'
AWS_PROFILE_PICTURE_LOCATION = 'profile_pictures'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR.parent / "my-app" / "public"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS and CSRF settings
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "Lax"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}


SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Longer access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # 7-day refresh token
    'ROTATE_REFRESH_TOKENS': True,                # Get new refresh token when refreshing
    'BLACKLIST_AFTER_ROTATION': True,             # Blacklist old refresh tokens
}

# USE THIS AFTER TESTING
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'Unihub.sg@gmail.com'  
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "vghe ypnq qpva tikn")
DEFAULT_FROM_EMAIL = 'Unihub.sg@gmail.com'  
